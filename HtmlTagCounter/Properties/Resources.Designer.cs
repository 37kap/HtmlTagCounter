//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HtmlTagCounter.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HtmlTagCounter.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Analysis completed successfully.
        /// </summary>
        internal static string AnalysisCompleted {
            get {
                return ResourceManager.GetString("AnalysisCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Analysis started.
        /// </summary>
        internal static string AnalysisStarted {
            get {
                return ResourceManager.GetString("AnalysisStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Action canceled by user.
        /// </summary>
        internal static string CanceledByUser {
            get {
                return ResourceManager.GetString("CanceledByUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Checking URLs from file.
        /// </summary>
        internal static string CheckUrlsFromFile {
            get {
                return ResourceManager.GetString("CheckUrlsFromFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Check url availability {0} of {1}.
        /// </summary>
        internal static string CheckUrlXofN {
            get {
                return ResourceManager.GetString("CheckUrlXofN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Error.
        /// </summary>
        internal static string Error {
            get {
                return ResourceManager.GetString("Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на File &apos;{0}&apos; does not exist..
        /// </summary>
        internal static string FileDoesNotExist {
            get {
                return ResourceManager.GetString("FileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на File reading completed.
        /// </summary>
        internal static string FileReadingCompleted {
            get {
                return ResourceManager.GetString("FileReadingCompleted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на File reading started.
        /// </summary>
        internal static string FileReadingStarted {
            get {
                return ResourceManager.GetString("FileReadingStarted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Html pages analysis.
        /// </summary>
        internal static string HtmlPagesAnalysis {
            get {
                return ResourceManager.GetString("HtmlPagesAnalysis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Max count tags.
        /// </summary>
        internal static string MaxCountTags {
            get {
                return ResourceManager.GetString("MaxCountTags", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Page analysis {0} of {1}.
        /// </summary>
        internal static string PageAnalysisXofN {
            get {
                return ResourceManager.GetString("PageAnalysisXofN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The page is not available.
        /// </summary>
        internal static string PageIsNotAvailable {
            get {
                return ResourceManager.GetString("PageIsNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The parameter must be of type DataGrid and the value must be of type int.
        /// </summary>
        internal static string TagCountIsMaxConverterTypesErrorMessage {
            get {
                return ResourceManager.GetString("TagCountIsMaxConverterTypesErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Timeout expired.
        /// </summary>
        internal static string TimeoutExpired {
            get {
                return ResourceManager.GetString("TimeoutExpired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An unhandled exception occurred.
        /// </summary>
        internal static string UnhandledExceptionOccurred {
            get {
                return ResourceManager.GetString("UnhandledExceptionOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Wrong URL.
        /// </summary>
        internal static string WrongUrl {
            get {
                return ResourceManager.GetString("WrongUrl", resourceCulture);
            }
        }
    }
}
